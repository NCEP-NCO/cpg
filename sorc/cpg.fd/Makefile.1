SHELL =  /bin/sh
OBJS =  SCS_Obs_definitions.o cmpstra.o copenbf.o cshrly.o cstli.o fdate.o ibfms.o cpg.o
FC =  ftn 
FFLAGS = -assume no2underscores

CC =  cc 
OS_INC = $(XML2_INC)
CFLAGS =  -DUNDERSCORE -DVERBOSE -D$(TARGET_UC) -I$(GEMINC) -I$(OS_INC)/libxml2
LDFLAGS =  -nofor-main   

LIBS =  -L$(OS_LIB) -lxml2 $(Z_LIBa) -lpthread $(BUFR_LIB4) $(OS_LIB)/libgemlib.a /usr/lib64/libgfortran.so.4


#  The default rule is to build both $(TARGET) executables.
all:	ObX TeX

ObX:
	sh -c "export TARGET=obx; make build"
	make clean

TeX:
	sh -c "export TARGET=tex; make build"
	make clean

#  Note that the below rule will force make to rebuild all $(OBJS) files.  This is necessary
#  because the $(OBJS) files are specific to each $(TARGET) executable, based upon the
#  corresponding value of $(TARGET_UC) which is used as a conditional compilation macro.
#
build:	clean
#	sh -c " module load ips/19.0.5.281 impi/19.0.5 bufr/11.3.0 zlib/1.2.11 gempak/7.3.3 ; \
#
	sh -c " module load PrgEnv-intel/8.0.0 intel/19.1.3.304 zlib/1.2.11 libxml2/2.9.10 bufr/11.4.0; \
		module use /apps/ops/para/nco/modulefiles ; module load gempak/7.14.0 ; \
	    module list; \
	    export TARGET_UC=`echo $(TARGET) | tr '[a-z]' '[A-Z]'`; \
	    make $(TARGET)"

$(TARGET):  $(OBJS)
	$(FC) $(LDFLAGS) -o cpg_$(@) $(OBJS) $(LIBS)

copenbf.o: copenbf.f
	@echo " "
	@echo "  Compiling the waitfor fortran module...."
	$(FC) $(FFLAGS) -c copenbf.f -o copenbf.o

ibfms.o: ibfms.f
	@echo " "
	@echo "  Compiling the waitfor fortran module...."
	$(FC) $(FFLAGS) -c ibfms.f -o ibfms.o

clean:
	rm -f *.o

clobber:    clean
	rm -f cpg_obx cpg_tex
